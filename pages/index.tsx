import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useState } from 'react';
import useSWR, { useSWRConfig } from 'swr';
import styles from '../styles/Home.module.css';
import { DecodeTxResponse } from './api/decodeTx';


const Home: NextPage = () => {
  const [value, setValue] = useState("");
  const { mutate } = useSWRConfig()
  const onChangeRequiredInput = (value?: string) => {
    setValue(value || "")
    mutate(`/api/decodeTx?rawTxHex=${value}`)
  }
  const { data, error } = useSWR<DecodeTxResponse, Error>(`/api/decodeTx?rawTxHex=${value}`, fetcher)
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="h-h-fit	m-10">
        <h1 className={styles.title}>
          Welcome to <a href="https://github.com/sea-edge/eth-tx-decoder">Ethereum Transaction Decoder!</a>
        </h1>
      </div>
      <form className="flex flex-col h-screen">
        <textarea className='
        block
        field-sizing-content
        resize
        text-base
        font-normal
        text-gray-700
        bg-white bg-clip-padding
        border border-solid border-gray-300
        rounded
        transition
        ease-in-out
        m-1
        focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none
        w-4/5
        '
          placeholder='Input Raw Transaction! ex.) 0x02fff...'
          // value={input}
          onChange={(e) => onChangeRequiredInput(e.target.value)}
        />
        {
          !data
            ? <p>Loading...</p>
            : <textarea className='
            block
            h-auto
            resize
            text-base
            font-normal
            text-gray-700
            bg-white bg-clip-padding
            border border-solid border-gray-300
            rounded
            transition
            ease-in-out
            m-1
            focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none
            w-4/5
            justify-center
            '
              placeholder='Input Raw Transaction! ex.) 0x02fff...'
              value={JSON.stringify(JSON.parse(data.decoded || "{}"), null, "\t") || ""}
              // onChange={e => setInput(e.target.value)}
              readOnly
            />

        }


      </form>



      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
const fetcher = (url: string) => fetch(url).then((r) => r.json())
